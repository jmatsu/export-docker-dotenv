#!/bin/sh

# process substitution is one of Bash features so use a temporary file for dash (and sh else)
# The file may contain secrets so make sure deleting it when exiting this function

export_docker_dotenv() {
  # for-license: https://github.com/jmatsu/export-docker-dotenv
  # Free feel to open an issue if you have any trouble when using this function.

  # Use printf, instead of echo, to handle escaped characters properly

  _export_docker_dotenv_env_path="$1"
  _export_docker_dotenv_mode="${2---export}"
  _export_docker_dotenv_line=''
  _export_docker_dotenv_name=''
  _export_docker_dotenv_value=''
  _export_docker_dotenv_status='0'
  _current_value=''
  _dummy_value_for_undefined_value='_____dummy_value_for_undefined_value_____'

  # Be careful using EXPORT_DOCKER_DOTENV_VERBOSE because it prints the contents in .env
  _export_docker_dotenv_verbose="${EXPORT_DOCKER_DOTENV_VERBOSE-}"

  # 1. Delete comments line that start with 0-N spaces + #
  # 2. Skip empty lines
  # 3. Assign each value to a tramporary variable
  # 4. Delegate it to a target environment variable through shell itself to avoid multiple evaluation

  if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
    printf "%s\n" "preservce the current env names to block overloading the existing variables" 1>&2
  fi

  _export_docker_dotenv_intermediate_file="$(mktemp)"
  cat < "$_export_docker_dotenv_env_path" | grep -v "^\s*#" | grep "=" > "$_export_docker_dotenv_intermediate_file"

  if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
    printf "%s\n" "filtered comments, empty lines and illegal assignment lines" 1>&2
  fi

  _export_docker_dotenv_line_number=0

  while read -r _export_docker_dotenv_line; do
    _export_docker_dotenv_line_number="$((_export_docker_dotenv_line_number + 1))"

    _export_docker_dotenv_name="$(printf "%s\n" "$_export_docker_dotenv_line" | cut -d = -f1)" || :

    if [ "$_export_docker_dotenv_name" = "" ]; then
      if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
        printf "%s\n" "L$_export_docker_dotenv_line_number: (unexpected) skipped because the name is not found" 1>&2
      fi

      continue
    fi

    # Split the string only by the first occurance
    if _export_docker_dotenv_value="$(printf "%s\n" "$_export_docker_dotenv_line" | awk -F= '{ idx = index($0, "="); print substr($0, idx + 1); }')"; then
      if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
        printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name's value was parsed and got $_export_docker_dotenv_value" 1>&2
      fi
    else
      _export_docker_dotenv_status="$?"
      if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
        printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_line couldn't be parsed" 1>&2
      fi
      break
    fi

    eval "_current_value=\${$_export_docker_dotenv_name-$_dummy_value_for_undefined_value}"

    if [ "$_export_docker_dotenv_mode" = '--no-overwrite' ]; then
      if [ ! "$_current_value" = "$_dummy_value_for_undefined_value" ]; then
        if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
          printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name cannot overwrite the existing value" 1>&2
        fi

        continue
      else
        if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
          printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name is not defined yet on this shell" 1>&2
        fi
      fi
    fi

    # Don't inline the value because ' or " in the value would be evaluated twice and cause unexpected results.
    if eval "$_export_docker_dotenv_name=\"\$_export_docker_dotenv_value\""; then
      if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
        printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name was sucessfully assigned" 1>&2
      fi
    else
      _export_docker_dotenv_status="$?"
      if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
        printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name couldn't be assigned" 1>&2
      fi

      break
    fi

    case "$_export_docker_dotenv_mode" in
      --export|--no-overwrite)
        # shellcheck disable=SC2163
        if export "$_export_docker_dotenv_name"; then
          if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
            printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name was sucessfully exported" 1>&2
          fi
        else
          _export_docker_dotenv_status="$?"
          if [ ! "$_export_docker_dotenv_verbose" = "" ]; then
            printf "%s\n" "L$_export_docker_dotenv_line_number: $_export_docker_dotenv_name couldn't be exported" 1>&2
          fi
          break
        fi
        ;;
      --no-export)
        # no-op. $name is already available in this shell session.
        ;;
    esac
  done < "$_export_docker_dotenv_intermediate_file"

  rm "$_export_docker_dotenv_intermediate_file" || :

  unset _export_docker_dotenv_env_path
  unset _export_docker_dotenv_mode
  unset _export_docker_dotenv_line
  unset _export_docker_dotenv_name
  unset _export_docker_dotenv_value
  unset _export_docker_dotenv_status
  unset _export_docker_dotenv_verbose
  unset _current_value
  unset _dummy_value_for_undefined_value
  unset _export_docker_dotenv_intermediate_file

  return $_export_docker_dotenv_status
}
